# Form implementation generated from reading ui file 'E:\cnc\uratujnas.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
"""
CNC control panel

designed for specific cnc machine, which rely on relative coordinates

not pretty, but working
"""

import sys
import serial
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import *
from PyQt6.QtGui import *
from PyQt6.QtCore import *
from PIL import Image
import numpy as np
from datetime import datetime
import re
import matplotlib.pyplot as plt
global step_per_rev 
step_per_rev=200
global com
com="COM4"
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(841, 451)
        Dialog.setAutoFillBackground(False)

        self.progress = QtWidgets.QProgressBar(parent=Dialog)
        self.progress.setGeometry(QtCore.QRect(20, 410, 631, 23))
        self.progress.setProperty("value", 0)
        self.progress.setObjectName("progress")

        self.tabWidget = QtWidgets.QTabWidget(parent=Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 651, 401))
        self.tabWidget.setAutoFillBackground(False)
        # self.tabWidget.setStyleSheet("background-color:rgba(255,255,255, 0);graphics-effect:opacity(255)")
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")

        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")

        self.gridLayoutWidget = QtWidgets.QWidget(parent=self.tab)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 291, 191))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")

        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(9, 9, 9, 9)
        self.gridLayout.setSpacing(6)
        self.gridLayout.setObjectName("gridLayout")

        self.lineEdit_5 = QtWidgets.QLineEdit(parent=self.gridLayoutWidget)
        self.lineEdit_5.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.lineEdit_5.setClearButtonEnabled(True)
        self.lineEdit_5.setObjectName("lineEdit_5")

        self.gridLayout.addWidget(self.lineEdit_5, 3, 1, 1, 1)

        self.lineEdit = QtWidgets.QLineEdit(parent=self.gridLayoutWidget)
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")

        self.gridLayout.addWidget(self.lineEdit, 0, 1, 1, 1)

        self.lineEdit_3 = QtWidgets.QLineEdit(parent=self.gridLayoutWidget)
        self.lineEdit_3.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.lineEdit_3.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.lineEdit_3.setClearButtonEnabled(True)
        self.lineEdit_3.setObjectName("lineEdit_3")

        self.gridLayout.addWidget(self.lineEdit_3, 2, 1, 1, 1)

        self.label = QtWidgets.QLabel(parent=self.gridLayoutWidget)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)

        self.label.setFont(font)
        # self.label.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label.setObjectName("label")

        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)

        self.pushButton_6 = QtWidgets.QPushButton(parent=self.gridLayoutWidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.b5Clicked_z)

        self.gridLayout.addWidget(self.pushButton_6, 4, 2, 1, 1)

        self.label_5 = QtWidgets.QLabel(parent=self.gridLayoutWidget)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)

        self.label_5.setFont(font)
        self.label_5.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WhatsThisCursor))
        # self.label_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_5.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_5.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label_5.setObjectName("label_5")

        self.gridLayout.addWidget(self.label_5, 3, 0, 1, 1)

        self.pushButton_2 = QtWidgets.QPushButton(parent=self.gridLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.button2Clicked_x)

        self.gridLayout.addWidget(self.pushButton_2, 2, 2, 1, 1)

        self.lineEdit_7 = QtWidgets.QLineEdit(parent=self.gridLayoutWidget)
        self.lineEdit_7.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.lineEdit_7.setInputMask("")
        self.lineEdit_7.setClearButtonEnabled(True)
        self.lineEdit_7.setObjectName("lineEdit_7")

        self.gridLayout.addWidget(self.lineEdit_7, 4, 1, 1, 1)

        self.pushButton_4 = QtWidgets.QPushButton(parent=self.gridLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.b4Clicked_y)

        self.gridLayout.addWidget(self.pushButton_4, 3, 2, 1, 1)

        self.label_3 = QtWidgets.QLabel(parent=self.gridLayoutWidget)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)

        self.label_3.setFont(font)
        self.label_3.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WhatsThisCursor))
        self.label_3.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        # self.label_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_3.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label_3.setObjectName("label_3")

        self.gridLayout.addWidget(self.label_3, 2, 0, 1, 1)

        self.pushButton_7 = QtWidgets.QPushButton(parent=self.gridLayoutWidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.button3Clicked)

        self.gridLayout.addWidget(self.pushButton_7, 0, 2, 1, 1)

        self.label_7 = QtWidgets.QLabel(parent=self.gridLayoutWidget)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)

        self.label_7.setFont(font)
        self.label_7.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WhatsThisCursor))
        # self.label_7.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_7.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_7.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label_7.setObjectName("label_7")

        self.gridLayout.addWidget(self.label_7, 4, 0, 1, 1)

        self.label_11 = QtWidgets.QLabel(parent=self.tab)
        self.label_11.setGeometry(QtCore.QRect(-3, -2, 1051, 681))
        # self.label_11.setStyleSheet("background-color: rgba(255, 255, 255, 255);")
        self.label_11.setText("")
        self.label_11.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.label_11.setPixmap(QtGui.QPixmap(":/nowyPrzedrostek/obr√≥bka-cnc.jpg"))
        self.label_11.setScaledContents(True)
        self.label_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignJustify|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_11.setObjectName("label_11")
        self.label_11.raise_()

        self.gridLayoutWidget.raise_()

        self.tabWidget.addTab(self.tab, "")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.gridLayoutWidget_2 = QtWidgets.QWidget(parent=self.tab_2)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 0, 511, 361))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")

        self.COMs = QtWidgets.QLineEdit(parent=self.tabWidget)
        self.COMs.setClearButtonEnabled(True)
        self.COMs.setGeometry(QtCore.QRect(551,25,75,20))
        self.COMs.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.COMs.setObjectName("COMs")
        self.COMs.setEnabled(True)
        self.COMs.show()

        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(9, 9, 9, 9)
        self.gridLayout_2.setSpacing(6)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.pushButton_8 = QtWidgets.QPushButton(parent=self.gridLayoutWidget_2)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)

        self.pushButton_8.setFont(font)
        self.pushButton_8.setAutoFillBackground(False)
#         self.pushButton_8.setStyleSheet("setBackgroundColor:rgba(255,0,0, 0);\n"
# "font: 700 9pt \"Times New Roman\";")
        self.pushButton_8.setAutoRepeatInterval(99)
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.sendTo_CNC)

        self.gridLayout_2.addWidget(self.pushButton_8, 2, 1, 1, 1)

        self.graphicsView = QtWidgets.QGraphicsView(parent=self.gridLayoutWidget_2)
        self.graphicsView.setStyleSheet("")
        self.graphicsView.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.graphicsView.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.graphicsView.setLineWidth(5)

        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.NoBrush)

        self.graphicsView.setBackgroundBrush(brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.NoBrush)

        self.graphicsView.setForegroundBrush(brush)
        self.graphicsView.setObjectName("graphicsView")
        self.scene = QGraphicsScene()

        self.gridLayout_2.addWidget(self.graphicsView, 3, 2, 1, 1)

        self.frame_2 = QtWidgets.QFrame(parent=self.gridLayoutWidget_2)
        # self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")

        self.label_9 = QtWidgets.QLabel(parent=self.frame_2)
        self.label_9.setGeometry(QtCore.QRect(30, 10, 381, 21))

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)

        self.label_9.setFont(font)
        self.label_9.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.label_9.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label_9.setObjectName("label_9")

        self.gridLayout_2.addWidget(self.frame_2, 2, 2, 1, 1)

        self.frame = QtWidgets.QFrame(parent=self.gridLayoutWidget_2)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")

        self.pushButton_9 = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(0, 220, 75, 81))

        # self.pushButton_9.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.pushButton_9.setAutoDefault(True)
        self.pushButton_9.setDefault(False)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.matplotlib_plot)

        self.pushButton = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton.setGeometry(QtCore.QRect(0, 0, 75, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.gcode_coords)

        self.pushButton_3 = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(0, 70, 75, 24))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.imageshow)

        self.pushButton_5 = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton_5.setGeometry(QtCore.QRect(0, 120, 75, 24))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.imageshow_plot)

        self.pushButton_10 = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton_10.setGeometry(QtCore.QRect(0, 160, 75, 24))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.clicked.connect(self.sculpting)

        self.gridLayout_2.addWidget(self.frame, 3, 1, 1, 1)

        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.tab_2)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(540, 40, 91, 321))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")

        self.label_8 = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        # self.label_8.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_8.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_8.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label_8.setObjectName("label_8")

        self.verticalLayout.addWidget(self.label_8)

        self.lineEdit_9 = QtWidgets.QLineEdit(parent=self.verticalLayoutWidget)
        self.lineEdit_9.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.lineEdit_9.setClearButtonEnabled(True)
        self.lineEdit_9.setObjectName("lineEdit_9")

        self.verticalLayout.addWidget(self.lineEdit_9)

        self.label_10 = QtWidgets.QLabel(parent=self.verticalLayoutWidget)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")

        self.label_10.setFont(font)
        self.label_10.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WhatsThisCursor))
        # self.label_10.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_10.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_10.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label_10.setObjectName("label_10")

        self.verticalLayout.addWidget(self.label_10)

        self.lineEdit_8 = QtWidgets.QLineEdit(parent=self.verticalLayoutWidget)
        self.lineEdit_8.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lineEdit_8.setClearButtonEnabled(True)
        self.lineEdit_8.setObjectName("lineEdit_8")

        self.verticalLayout.addWidget(self.lineEdit_8)

        self.label_12 = QtWidgets.QLabel(parent=self.tab_2)
        self.label_12.setGeometry(QtCore.QRect(10, 0, 1471, 911))
        # self.label_12.setStyleSheet("background-color: rgba(255, 255, 255, 255);")
        self.label_12.setText("")
        self.label_12.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        # self.label_12.setPixmap(QtGui.QPixmap(":/nowyPrzedrostek/obr√≥bka-cnc.jpg"))
        self.label_12.setScaledContents(True)
        self.label_12.setAlignment(QtCore.Qt.AlignmentFlag.AlignJustify|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_12.setObjectName("label_12")
        self.label_12.raise_()
        
        self.gridLayoutWidget_2.raise_()

        self.verticalLayoutWidget.raise_()

        self.tabWidget.addTab(self.tab_2, "")

        self.label_13 = QtWidgets.QLabel(parent=Dialog)
        self.label_13.setGeometry(QtCore.QRect(0, 0, 841, 451))
        # self.label_13.setStyleSheet("background-color: rgba(255, 255, 255, 255);")
        self.label_13.setText("")
        self.label_13.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        # self.label_13.setPixmap(QtGui.QPixmap(":/fyhb/tuleja-zaciskowa-er11-2mm-tulejka-uchwyt-do-glowicy-zaciskowej-c16-cnc-frezarka.jpg"))
        self.label_13.setScaledContents(True)
        self.label_13.setAlignment(QtCore.Qt.AlignmentFlag.AlignJustify|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_13.setObjectName("label_13")
        self.label_13.raise_()

        self.tabWidget.raise_()

        self.progress.raise_()

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "CNC_panel"))
        self.lineEdit_5.setText(_translate("Dialog", "0"))
        self.lineEdit.setText(_translate("Dialog", "1"))
        self.COMs.setText(_translate("Dialog","COM4"))
        self.lineEdit_3.setText(_translate("Dialog", "0"))
        self.label.setText(_translate("Dialog", "Scale [step/mm]"))
        self.pushButton_6.setText(_translate("Dialog", "Z"))
        self.label_5.setText(_translate("Dialog", "[mm]"))
        self.pushButton_2.setText(_translate("Dialog", "X"))
        self.lineEdit_7.setText(_translate("Dialog", "0"))
        self.pushButton_4.setText(_translate("Dialog", "Y"))
        self.label_3.setText(_translate("Dialog", "[mm]"))
        self.pushButton_7.setText(_translate("Dialog", "SendAll"))
        self.label_7.setText(_translate("Dialog", "[mm]"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "Move engines"))
        self.pushButton_8.setText(_translate("Dialog", "Send\n"
"coords"))
        self.label_9.setText(_translate("Dialog", "An image will be shown here after conversion"))
        self.pushButton_9.setText(_translate("Dialog", "Coords\n"
"previev\n"
"in\n"
"MatPlotLib"))
        self.pushButton.setText(_translate("Dialog", "Load\n"
"GCODE"))
        self.pushButton_3.setText(_translate("Dialog", "Drill image"))
        self.pushButton_5.setText(_translate("Dialog", "Plot image"))
        self.pushButton_10.setText(_translate("Dialog", "Sculpt image"))
        self.label_8.setText(_translate("Dialog", "Below: enter\n"
"Z-axis scale\n"
"[mm/gv]\n\nimages only"))
        self.lineEdit_9.setText(_translate("Dialog", "0.008"))
        self.label_10.setText(_translate("Dialog", "Below: enter\n"
"XY-axes\n"
"scale\n"
"[mm/px]\n\nimages only"))
        self.lineEdit_8.setText(_translate("Dialog", "0.1"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "Create coordinates and send"))
    def matplotlib_plot(self):
        file = QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)")
        if file[0]:
            temp = []
            f = open(file[0], "r",encoding='utf-8')
            for line in f:
                 el=line.split("   ")
                 temp.append([float(el[0]),float(el[1]),float(el[2])])
            f.close()
            temp_array = np.array(temp)
            fig = plt.figure()
            ax = fig.add_subplot(111, projection='3d')
            x, y, z = temp_array.T
            ax.plot(x, y, z, c='r', linestyle='-', label='Lines', linewidth=0.07)
            ax.set_xlabel('X-axis')
            ax.set_ylabel('Y-axis')
            ax.set_zlabel('Z-axis')
            ax.legend()
            plt.show()
    def send_gcode_To_CNC(self,file):
        global step_per_rev
        global com
        steps_per_mm = int(step_per_rev / 0.8)
        # file = QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)")
        # if file[0]:
        # temp = []
        # f = open(file[0], "r")

        # for line in file:
        #     a, b, c = line.split("   ")
        #     temp.append([a, b, c])
        
        temp = np.asarray(file, dtype=np.float32)
        now = datetime.now()
        fname = now.strftime(f"%d_%m_%Y__%H_%M_%S_sended")
        f2 = open(str(fname) + ".txt", "w")
        com=str(self.COMs.text())
        s = serial.Serial(com, 115200)
        
        for index in range(0, len(temp), 1):
            if index>=1:
                delta_x = int((temp[index-1,0]-temp[index,0]) * steps_per_mm)
                delta_y = int((temp[index-1,1]-temp[index,1]) * steps_per_mm)
                delta_z = int((temp[index-1,2]-temp[index,2]) * steps_per_mm)
                
                data = f"{delta_x} {delta_y} {delta_z}\n"
                s.write(data.encode("utf-8"))
                f2.write(f"{delta_x} {delta_y} {delta_z}\n")
            self.progress.setValue(int(np.floor(float(100.0*index/len(temp)))))
            
            while True:
                a = s.readline(5).decode().strip()
                print(a)
                
                if a == "ok":
                    
                    break
            # print("ok")
            print(index)
        
        # f.close()
        f2.close()
    def gcode_coords(self):
        # global step_per_rev
        # steps_per_mm = int(step_per_rev / 0.8)
        file = QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)")
        if file[0]:
            temp = []
            f = open(file[0], "r",encoding='utf-8')

            def arch_cw(x_prev, y_prev, i, j, x, y):
                radius = 0.0
                angle_arch = 0.0

                try:
                    if i == 0.0 and j == 0.0:
                        angle_arch = 0.0
                    else:
                        radius = np.sqrt(i**2 + j**2)
                        ai_denominator = (y_prev - j)
                        axy_denominator = (x_prev + i - x)
                        
                        if abs(ai_denominator) < 1e-6 or abs(axy_denominator) < 1e-6:
                            ai = 0.0
                            axy = 0.0
                        else:
                            ai = (x_prev - i) / ai_denominator
                            axy = (y_prev + j - y) / axy_denominator
                        
                        if (1 + ai * axy) < 1e-6:
                            angle_arch = 0.0
                        else:
                            angle_arch = np.arctan(abs(ai - axy) / (1 + ai * axy))
                            
                        if x == x_prev and y == y_prev:
                            angle_arch = 2 * np.pi
                        if x < x_prev or y < y_prev:
                            angle_arch = 2 * np.pi - angle_arch

                    decrement = 0.01
                    arc_points = []
                    while angle_arch >= 0.0:
                        angle_arch -= decrement
                        x_arc = i + radius * np.cos(angle_arch)
                        y_arc = j + radius * np.sin(angle_arch)
                        arc_points.append((x_arc, y_arc))

                    return arc_points
                except Exception as e:
                    print(f"Error in arch_cw: {e}")
                    return []
            def arch_ccw(x_prev, y_prev, i, j, x, y):
                radius = 0.0
                angle_arch = 0.0

                try:
                    if i == 0.0 and j == 0.0:
                        angle_arch = 0.0
                    else:
                        radius = np.sqrt(i**2 + j**2)
                        ai_denominator = (y_prev - j)
                        axy_denominator = (x_prev + i - x)
                        
                        if abs(ai_denominator) < 1e-6 or abs(axy_denominator) < 1e-6:
                            ai = 0.0
                            axy = 0.0
                        else:
                            ai = (x_prev - i) / ai_denominator
                            axy = (y_prev + j - y) / axy_denominator
                        
                        if (1 + ai * axy) < 1e-6:
                            angle_arch = 0.0
                        else:
                            angle_arch = np.arctan(abs(ai - axy) / (1 + ai * axy))
                            
                        if x == x_prev and y == y_prev:
                            angle_arch = 2 * np.pi
                        if x < x_prev or y < y_prev:
                            angle_arch = 2 * np.pi - angle_arch

                    increment = 0.01
                    arc_points = []
                    dummy=0.0
                    while dummy <= angle_arch:
                        angle_arch += increment
                        x_arc = i + radius * np.cos(dummy)
                        y_arc = j + radius * np.sin(dummy)
                        arc_points.append((x_arc, y_arc))

                    return arc_points
                except Exception as e:
                    print(f"Error in arch_cw: {e}")
                    return []
            
            lines = [line for line in f]
            temp = []
            index = 0
            z = 0.0
            x = 0.0
            y = 0.0
            x_prev = 0.0
            y_prev = 0.0
            # z_prev = 0.0
# 
            for line2 in lines:
                try:
                    x_prev = x
                    y_prev = y
                    # z_prev = z
                    i = 0.0
                    j = 0.0
                    feed_rate = 1.0
                    k = 0.0
                    g = 0.0
                    parts = re.findall(r'([A-Z]+)([+-]?\d+(?:\.\d+)?)', line2)
                    for part in parts:
                        code, value = part
                        value = float(value)
                        if code == 'X':
                            x = value
                        if code == 'Y':
                            y = value
                        if code == 'Z':
                            z = value
                        if code == 'I':
                            i = value
                        if code == 'J':
                            j = value
                        if code == 'K':
                            k = value
                        if code == 'F':
                            feed_rate = value
                        if code == 'G':
                            g = value
                        
                    if i != 0.0 or j != 0.0:
                        if g==2:
                            arc_points = arch_cw(x_prev, y_prev, i, j, x, y)
                        if g==3:
                            arc_points = arch_ccw(x_prev, y_prev, i, j, x, y)
                        for point in arc_points:
                            x1, y1 = point
                            x1 = x_prev + x1
                            y1 = y_prev + y1
                            temp.append([x1, y1, z])
                    else:
                        temp.append([x, y, z])
                    
                    index += 1
                    self.progress.setValue(int(np.floor(float(100.0*index/len(lines)))))

                except Exception as e:
                    print(f"Error parsing line: {line2}")
                    print(f"Error message: {e}")
            now = datetime.now()
            fname=now.strftime(f"%d_%m_%Y__%H_%M_%S_gcode-decoded")
            f2=open(str(fname)+".txt","w")
            # cra=0
            # temp2=[]
            # for shit in range(len(temp)):
            #     if shit>=1:
            #         dx=abs(temp[shit][0]-temp[shit-1][0])
            #         dy=abs(temp[shit][1]-temp[shit-1][1])
            #         dz=abs(temp[shit][2]-temp[shit-1][2])
            #         if dx >=0.004 or dy>=0.004 or dz>=0.004:
            #             temp2.append([temp[shit][0],temp[shit][1],temp[shit][2]])
            #     self.progress.setValue(int(np.floor(float(100.0*shit/len(temp)))))
            index=0
            for element in temp:
                index+=1
                f2.writelines(str(element[0])+"   "+str(element[1])+"   "+str(element[2])+"\n")
                self.progress.setValue(int(np.floor(float(100.0*index/len(temp)))))
            # self.send_gcode_To_CNC(temp)
            f2.close()
            # Ui_Dialog.succesEvent(self, f2.close())
    def sendTo_CNC(self):
        global step_per_rev
        global com
        steps_per_mm = int(step_per_rev / 0.8)
        file = QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)")
        if file[0]:
            temp = []
            with open(file[0], "r") as f:
                indexx=0
                for line in f:
                    parts = re.findall(r"[-+]?\d*\.\d+|\d+(?:[eE][-+]?\d+)?", line)
                    indexx+=1
                    try:
                        # if len(parts) == 3:
                        a, b, c = map(float, parts)
                        temp.append([a, b, c])
                        # else:
                        #     print("Invalid line:" + str(indexx))
                    except ValueError as e:
                        print("Error parsing line:", line)
            print(1)
            f.close()

            temp = np.asarray(temp)
            now = datetime.now()
            fname = now.strftime(f"%d_%m_%Y__%H_%M_%S_sended")
            f2 = open(str(fname) + ".txt", "w")
            try:
                com=str(self.COMs.text())
                s = serial.Serial(com, 115200)
            except:
                print(Exception)
            print(2)
            indexxx=0
            print(len(temp))
            while True:
                print(indexxx)
                if indexxx>=1:
                    print(indexxx)
                    delta_x = int((temp[indexxx-1,0]-temp[indexxx,0]) * steps_per_mm)
                    delta_y = int((temp[indexxx-1,1]-temp[indexxx,1]) * steps_per_mm)
                    delta_z = int((temp[indexxx-1,2]-temp[indexxx,2]) * steps_per_mm)
                    
                    data = f"{delta_x} {delta_y} {delta_z}\n"
                    print(3)
                    try:
                        s.write(data.encode("utf-8"))
                        print(4)
                    except:
                        print(Exception)
                        # print()
                    f2.write(data)
                    self.progress.setValue(int(np.floor(float(100.0*indexxx/len(temp)))))
                
                    while True:
                        a = s.readline(5).decode().strip()
                        print(a)
                        
                        if a == "ok":
                            
                            break
                indexxx+=1
                if indexxx>=len(temp):
                    break
                # print("ok")
                print(indexxx)
            
            
                
            # Ui_Dialog.succesEvent(self, f2.close())
        # print("ok")

    def coord(self,file):  
        
        now = datetime.now()
        fname=now.strftime(f"%d_%m_%Y__%H_%M_%S_drill")
        f=open(str(fname)+".txt","w")
        array=np.asanyarray(file)
        scaleXY=float(str(self.lineEdit_8.text()))
        scaleZ=float(str(self.lineEdit_9.text()))

        for row in range(len(array)):
         # checking whether the current row number is even
            if row % 2 == 0:
            # traversing through all the columns of the current row
               for column in range(len(array[0])):
                # printing from left to right if the current row is even
                    x=row*scaleXY
                    y=column*scaleXY
                    if np.shape(array) == (len(array),len(array[0]),3):
                        if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                            z=(255.0-array[row,column,0]/3-array[row,column,1]/3-array[row,column,2]/3)*scaleZ+1*scaleZ
                    if np.shape(array) == (len(array),len(array[0]),4): #_____________________________________format typu PNG ma 4 warto≈õci - kszta≈Çt tensora: (x, y, 4)
                        if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                            z=(255.0-array[row,column,0]/3-array[row,column,1]/3-array[row,column,2]/3)*scaleZ+1*scaleZ
                    if np.shape(array) == (len(array),len(array[0]),1):
                        if (array[row,column,0])>0:
                            z=(255.0-array[row,column,0])*scaleZ+1*scaleZ
                    if np.shape(array) == (len(array),len(array[0])):
                        if (array[row,column])>0:
                            z=(255.0-array[row,column])*scaleZ+1*scaleZ
                    # f.writelines(str(x)+"   "+str(y)+"   "+str(0.5)+"\n")
                    if z>1.1:
                        f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
                        f.writelines(str(x)+"   "+str(y)+"   "+str(z)+"\n")
                        f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")

         # Else, printing from right to left if the current row is even
            if row % 2 == 1:
            # traversing from the end of the columns
                for column in range(len(array[0])-1,-1,-1):
                    x=row*scaleXY
                    y=column*scaleXY
                    if np.shape(array) == (len(array),len(array[0]),3):
                        if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                            z=(255.0-array[row,column,0]/3-array[row,column,1]/3-array[row,column,2]/3)*scaleZ+1*scaleZ
                    if np.shape(array) == (len(array),len(array[0]),4):
                        if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                            z=(255.0-array[row,column,0]/3-array[row,column,1]/3-array[row,column,2]/3)*scaleZ+1*scaleZ
                    if np.shape(array) == (len(array),len(array[0]),1):
                        if (array[row,column,0])>0:
                            z=(255.0-array[row,column,0])*scaleZ+1*scaleZ
                    if np.shape(array) == (len(array),len(array[0])):
                        if (array[row,column])>0:
                            z=(255.0-array[row,column])*scaleZ+1*scaleZ
                    # f.writelines(str(x)+"   "+str(y)+"   "+str(0.5)+"\n")
                    if z>1.1:
                        f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
                        f.writelines(str(x)+"   "+str(y)+"   "+str(z)+"\n")
                        f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
            self.progress.setValue(int(np.floor(float(100.0*row/len(array)))))
        f.close()
                

    def imageshow(self): #
        file=QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)") 
        if file[0]:
            image = QImage(file[0])
            fibrile=Image.open(file[0])

            self.scene.addPixmap(QPixmap(image))
            self.graphicsView.setScene(self.scene)
            Ui_Dialog.coord(self,fibrile)
     
       
    
    def button3Clicked(self):   
        global step_per_rev 
        global com
        scale=float(self.lineEdit.text())
        steps_y=int(float(self.lineEdit_5.text())/scale)
        steps_x=int(float(self.lineEdit_3.text())/scale)
        steps_z=int(float(self.lineEdit_7.text())/scale)
        com=str(self.COMs.text())
        s = serial.Serial(com, 115200)
        data = f"{steps_x} {steps_y} {steps_z}\n"
        s.write(data.encode("utf-8"))
        
    def button2Clicked_x(self):
        
        global step_per_rev 
        global com
        scale=float(self.lineEdit.text())
        steps=np.floor(float(self.lineEdit_3.text()))
        com=str(self.COMs.text())
        s = serial.Serial(com, 115200)
        data = f"{int(steps/scale)} {0} {0}\n"
        s.write(data.encode("utf-8"))

    def b4Clicked_y(self):  
        global step_per_rev
        global com 
        scale=float(self.lineEdit.text())
        steps=np.floor(float(self.lineEdit_5.text()))
        com=str(self.COMs.text())
        s = serial.Serial(com, 115200)
        data = f"{0} {int(steps/scale)} {0}\n"
        s.write(data.encode("utf-8"))
       
    def b5Clicked_z(self):   
        global step_per_rev 
        global com
        scale=float(self.lineEdit.text())
        steps=np.floor(float(self.lineEdit_7.text()))
        com=str(self.COMs.text())
        print(com)
        s = serial.Serial(com, 115200)
        data = f"{0} {0} {int(steps/scale)}\n"
        try:
            s.write(data.encode("utf-8"))
        except Exception as e:
            print(e)


    def coord_plot(self,file):   
        # file=QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)")
        # if file[0]:

        # image = QImage(file[0])
        # fibrile=Image.open(file[0])

        # self.scene.addPixmap(QPixmap(image))
        # self.graphicsView.setScene(self.scene)
        now = datetime.now()
        fname=now.strftime(f"%d_%m_%Y__%H_%M_%S_plot")
        f=open(str(fname)+".txt","w")
        array=np.asanyarray(file)
        scaleXY=float(str(self.lineEdit_8.text()))
        scaleZ=float(str(self.lineEdit_9.text()))

        for row in range(len(array)):
        # checking whether the current row number is even
            if row % 2 == 0:
        # traversing through all the columns of the current row
                for column in range(len(array[0])):
                # printing from left to right if the current row is even
                        x=row*scaleXY
                        y=column*scaleXY
                        if np.shape(array) == (len(array),len(array[0]),3):
                            if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                                    z=1*scaleZ
                            else:
                                    z=0
                        if np.shape(array) == (len(array),len(array[0]),4): #_____________________________________format typu PNG ma 4 warto≈õci - kszta≈Çt tensora: (x, y, 4)
                            if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                                    z=1/scaleZ
                            else:
                                    z=0
                        if np.shape(array) == (len(array),len(array[0]),1):
                            if (array[row,column,0])>0:
                                    z=1/scaleZ
                            else:
                                    z=0
                        if np.shape(array) == (len(array),len(array[0])):
                            if (array[row,column])>0:
                                    z=1/scaleZ
                            else:
                                    z=0                            
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.5)+"\n")
                        # if z>1*scaleZ:
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
                        f.writelines(str(x)+"   "+str(y)+"   "+str(z)+"\n")
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")

        # Else, printing from right to left if the current row is even
            if row % 2 == 1:
        # traversing from the end of the columns
                for column in range(len(array[0])-1,-1,-1):
                        x=row*scaleXY
                        y=column*scaleXY
                        if np.shape(array) == (len(array),len(array[0]),3):
                            if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                                    z=1*scaleZ
                            else:
                                    z=0
                        if np.shape(array) == (len(array),len(array[0]),4): 
                            if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>0:
                                    z=1*scaleZ
                            else:
                                    z=0
                        if np.shape(array) == (len(array),len(array[0]),1):
                            if (array[row,column,0])>0:
                                    z=1*scaleZ
                            else:
                                    z=0
                        if np.shape(array) == (len(array),len(array[0])):
                            if (array[row,column])>0:
                                    z=1*scaleZ
                            else:
                                    z=0                            
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.5)+"\n")
                        # if z>1*scaleZ:
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
                        f.writelines(str(x)+"   "+str(y)+"   "+str(z)+"\n")
                # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
            self.progress.setValue(int(np.floor(float(100.0*row/len(array)))))
        f.close()
        # self.succesEvent(f.close())
                
    def sculpting(self,file):
        file=QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)") 
        if file[0]:
            image = QImage(file[0])
            fibrile=Image.open(file[0])

            self.scene.addPixmap(QPixmap(image))
            self.graphicsView.setScene(self.scene)
            now = datetime.now()
            fname=now.strftime(f"%d_%m_%Y__%H_%M_%S_sculpt")
            f=open(str(fname)+".txt","w")
            array=np.asanyarray(fibrile)
       
        
            scaleXY=float(str(self.lineEdit_8.text()))
            scaleZ=float(str(self.lineEdit_9.text()))

            for row in range(len(array)):
            # checking whether the current row number is even
                if row % 2 == 0:
                # traversing through all the columns of the current row
                    for column in range(len(array[0])):
                        # printing from left to right if the current row is even
                            x=row*scaleXY
                            y=column*scaleXY
                            if np.shape(array) == (len(array),len(array[0]),3):
                                if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>=0:
                                    z=(array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)*scaleZ

                            if np.shape(array) == (len(array),len(array[0]),4): 
                                if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>=0:
                                    z=(array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)*scaleZ

                            if np.shape(array) == (len(array),len(array[0]),1):
                                if (array[row,column,0])>=0:
                                    z=array[row,column,0]*scaleZ

                            if np.shape(array) == (len(array),len(array[0])):
                                if (array[row,column])>=0:
                                    z=array[row,column]*scaleZ
                                
                            # f.writelines(str(x)+"   "+str(y)+"   "+str(0.5)+"\n")
                            # if z>1*scaleZ:
                            # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
                            f.writelines(str(x)+"   "+str(y)+"   "+str(z)+"\n")
                            # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")

            # Else, printing from right to left if the current row is even
                if row % 2 == 1:
                # traversing from the end of the columns
                    for column in range(len(array[0])-1,-1,-1):
                        x=row*scaleXY
                        y=column*scaleXY
                        if np.shape(array) == (len(array),len(array[0]),3):
                            if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>=0:
                                z=(array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)*scaleZ

                        if np.shape(array) == (len(array),len(array[0]),4): 
                            if (array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)>=0:
                                z=(array[row,column,0]/3+array[row,column,1]/3+array[row,column,2]/3)*scaleZ

                        if np.shape(array) == (len(array),len(array[0]),1):
                            if (array[row,column,0])>=0:
                                z=(array[row,column,0])*scaleZ

                        if np.shape(array) == (len(array),len(array[0])):
                            if (array[row,column])>=0:
                                z=(array[row,column])*scaleZ
                            
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.5)+"\n")
                        # if z>1*scaleZ:
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
                        f.writelines(str(x)+"   "+str(y)+"   "+str(z)+"\n")
                        # f.writelines(str(x)+"   "+str(y)+"   "+str(0.0)+"\n")
                self.progress.setValue(int(np.floor(float(100.0*row/len(array)))))
        f.close()
    def imageshow_plot(self): 
        file=QFileDialog.getOpenFileName(Dialog, "Open File", "", "All Files (*)")
        if file[0]:
            image = QImage(file[0])
            fibrile=Image.open(file[0])

            self.scene.addPixmap(QPixmap(image))
            self.graphicsView.setScene(self.scene)
            self.coord_plot(fibrile)
            # self.succesEvent(None)

    def succesEvent(self, event): 

        reply = QMessageBox.question(self, 'Message', 
            "Task complete. Click 'yes' for exit, or 'no' for staying", QMessageBox.StandardButton.Yes |
            QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)

        if reply == QMessageBox.StandardButton.Yes:
            sys.exit()
        else:
            global step_per_rev
            step_per_rev=200

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
